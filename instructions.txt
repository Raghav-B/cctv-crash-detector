# Starting training
python keras_retinanet/bin/train.py --backbone=resnet50 --batch-size=2 --epochs=100 --steps=1022 --imagenet-weights --image-min-side=600 --compute-val-loss --weighted-average csv ../data_processing/csvs/keras_train.csv ../data_processing/csvs/labels.csv --val-annotations=../data_processing/csvs/keras_validation.csv

# Resuming training from a previous snapshot
python keras_retinanet/bin/train.py --weights=inference_graphs/resnet50_800p/resnet50_csv_28.h5 --backbone=resnet50 --batch-size=2 --epochs=50 --steps=1000 --compute-val-loss --weighted-average csv ../data_processing/csvs/keras_train.csv ../data_processing/csvs/labels.csv --val-annotations=../data_processing/csvs/keras_validation.csv

# Run validation on inference model
python keras_retinanet/bin/evaluate.py --backbone=resnet50 --score-threshold=0.95 --image-min-side=600 csv ../data_processing/csvs/keras_validation.csv ../data_processing/csvs/labels.csv inference_graphs/temp/vehicle_detection_model.h5

# Debugging annotations/labels
python keras_retinanet/bin/debug.py --anchors --annotations csv model_training/keras_train.csv model_training/keras_labels.csv

# Starting tensorboard
tensorboard --logdir=logs/

# Converting training model to inference graph (ignore any compile error - it still works)
python keras_retinanet/bin/convert_model.py snapshots/resnet101_csv_01.h5 inference_graphs/resnet101_csv_01.h5
python keras_retinanet/bin/convert_model.py snapshots/resnet50_coco_best_v2.1.0.h5 inference_graphs/resnet50_coco_best_v2.1.0.h5